// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using iPath.Data;

#nullable disable

namespace iPath.Migrations.Sqlite.Migrations
{
    [DbContext(typeof(NewDB))]
    partial class NewDBModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn)
                .HasAnnotation("ProductVersion", "9.0.2");

            modelBuilder.Entity("UserUserRole", b =>
                {
                    b.Property<int>("RolesId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("UserId")
                        .HasColumnType("INTEGER");

                    b.HasKey("RolesId", "UserId");

                    b.HasIndex("UserId");

                    b.ToTable("UserUserRole");
                });

            modelBuilder.Entity("iPath.Data.Entities.Annotation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("TEXT");

                    b.Property<int?>("NodeId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("OwnerId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Text")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("DeletedOn");

                    b.HasIndex("NodeId");

                    b.HasIndex("OwnerId");

                    b.ToTable("Annotations", (string)null);
                });

            modelBuilder.Entity("iPath.Data.Entities.Community", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("BaseUrl")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.Property<int>("OwnerId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Visibility")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("DeletedOn");

                    b.HasIndex("OwnerId");

                    b.ToTable("Communities", (string)null);
                });

            modelBuilder.Entity("iPath.Data.Entities.CommunityGroup", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("CommunityId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("GroupId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("CommunityId");

                    b.HasIndex("GroupId", "CommunityId")
                        .IsUnique();

                    b.ToTable("CommunityGroup", (string)null);
                });

            modelBuilder.Entity("iPath.Data.Entities.CommunityMember", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<bool>("AllGroups")
                        .HasColumnType("INTEGER");

                    b.Property<int>("CommunityId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Role")
                        .HasColumnType("INTEGER");

                    b.Property<int>("UserId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("CommunityId");

                    b.HasIndex("UserId", "CommunityId")
                        .IsUnique();

                    b.ToTable("CommunityMember", (string)null);
                });

            modelBuilder.Entity("iPath.Data.Entities.FileUpload", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("TEXT");

                    b.Property<string>("Filename")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("MimeType")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("NodeId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("OwnerId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("ParentId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("TempFile")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("NodeId");

                    b.HasIndex("OwnerId");

                    b.ToTable("FileUploads", (string)null);
                });

            modelBuilder.Entity("iPath.Data.Entities.Group", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("TEXT");

                    b.Property<int>("GroupType")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.Property<int?>("OwnerId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Visibility")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("DeletedOn");

                    b.HasIndex("OwnerId");

                    b.ToTable("Groups", (string)null);
                });

            modelBuilder.Entity("iPath.Data.Entities.GroupMember", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("GroupId")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsFavourite")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Notifications")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Role")
                        .HasColumnType("INTEGER");

                    b.Property<int>("UserId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("GroupId");

                    b.HasIndex("UserId", "GroupId")
                        .IsUnique();

                    b.ToTable("GroupMember", (string)null);
                });

            modelBuilder.Entity("iPath.Data.Entities.Node", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("TEXT");

                    b.Property<int?>("GroupId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("TEXT");

                    b.Property<string>("NodeType")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("OwnerId")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("ParentNodeId")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("RootNodeId")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("SortNr")
                        .HasColumnType("INTEGER");

                    b.Property<string>("StorageId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("DeletedOn");

                    b.HasIndex("GroupId");

                    b.HasIndex("OwnerId");

                    b.HasIndex("ParentNodeId");

                    b.HasIndex("RootNodeId");

                    b.ToTable("Nodes", (string)null);
                });

            modelBuilder.Entity("iPath.Data.Entities.NodeImport", b =>
                {
                    b.Property<int>("NodeId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Data")
                        .HasColumnType("TEXT");

                    b.Property<string>("Info")
                        .HasColumnType("TEXT");

                    b.HasKey("NodeId");

                    b.ToTable("NodeImport");
                });

            modelBuilder.Entity("iPath.Data.Entities.NodeLastVisit", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("NodeId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("Date")
                        .HasColumnType("TEXT");

                    b.HasKey("UserId", "NodeId");

                    b.HasIndex("Date");

                    b.HasIndex("NodeId");

                    b.ToTable("NodeLastVisit", (string)null);
                });

            modelBuilder.Entity("iPath.Data.Entities.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("TEXT");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.Property<string>("EmailInvariant")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsActive")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("TEXT");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.Property<string>("UsernameInvariant")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.Property<string>("iPath2Password")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("DeletedOn");

                    b.ToTable("Users", (string)null);
                });

            modelBuilder.Entity("iPath.Data.Entities.UserNotification", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("Date")
                        .HasColumnType("TEXT");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("TEXT");

                    b.Property<bool>("Seen")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Type")
                        .HasColumnType("INTEGER");

                    b.Property<int>("UserId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("Date");

                    b.HasIndex("UserId");

                    b.ToTable("UserNotifications", (string)null);
                });

            modelBuilder.Entity("iPath.Data.Entities.UserRefreshToken", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("ExpiredAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("RefreshToken")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.Property<int>("UserId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.ToTable("UserRefreshToken");
                });

            modelBuilder.Entity("iPath.Data.Entities.UserRole", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("UserRoles", (string)null);
                });

            modelBuilder.Entity("UserUserRole", b =>
                {
                    b.HasOne("iPath.Data.Entities.UserRole", null)
                        .WithMany()
                        .HasForeignKey("RolesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("iPath.Data.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("iPath.Data.Entities.Annotation", b =>
                {
                    b.HasOne("iPath.Data.Entities.Node", "Node")
                        .WithMany("Annotations")
                        .HasForeignKey("NodeId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("iPath.Data.Entities.User", "Owner")
                        .WithMany()
                        .HasForeignKey("OwnerId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Node");

                    b.Navigation("Owner");
                });

            modelBuilder.Entity("iPath.Data.Entities.Community", b =>
                {
                    b.HasOne("iPath.Data.Entities.User", "Owner")
                        .WithMany()
                        .HasForeignKey("OwnerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Owner");
                });

            modelBuilder.Entity("iPath.Data.Entities.CommunityGroup", b =>
                {
                    b.HasOne("iPath.Data.Entities.Community", "Community")
                        .WithMany("Groups")
                        .HasForeignKey("CommunityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("iPath.Data.Entities.Group", "Group")
                        .WithMany("Communities")
                        .HasForeignKey("GroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Community");

                    b.Navigation("Group");
                });

            modelBuilder.Entity("iPath.Data.Entities.CommunityMember", b =>
                {
                    b.HasOne("iPath.Data.Entities.Community", "Community")
                        .WithMany("Members")
                        .HasForeignKey("CommunityId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("iPath.Data.Entities.User", "User")
                        .WithMany("CommunityMembership")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Community");

                    b.Navigation("User");
                });

            modelBuilder.Entity("iPath.Data.Entities.FileUpload", b =>
                {
                    b.HasOne("iPath.Data.Entities.Node", "Node")
                        .WithMany("Uploads")
                        .HasForeignKey("NodeId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("iPath.Data.Entities.User", "Owner")
                        .WithMany("Uploads")
                        .HasForeignKey("OwnerId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Node");

                    b.Navigation("Owner");
                });

            modelBuilder.Entity("iPath.Data.Entities.Group", b =>
                {
                    b.HasOne("iPath.Data.Entities.User", "Owner")
                        .WithMany()
                        .HasForeignKey("OwnerId");

                    b.OwnsOne("iPath.Data.Entities.GroupSettings", "Settings", b1 =>
                        {
                            b1.Property<int>("GroupId")
                                .HasColumnType("INTEGER");

                            b1.Property<string>("DefaultText")
                                .HasColumnType("TEXT");

                            b1.Property<string>("NodeDescriptionType")
                                .HasColumnType("TEXT");

                            b1.Property<string>("Purpose")
                                .HasColumnType("TEXT");

                            b1.HasKey("GroupId");

                            b1.ToTable("Groups");

                            b1.ToJson("Settings");

                            b1.WithOwner()
                                .HasForeignKey("GroupId");
                        });

                    b.Navigation("Owner");

                    b.Navigation("Settings")
                        .IsRequired();
                });

            modelBuilder.Entity("iPath.Data.Entities.GroupMember", b =>
                {
                    b.HasOne("iPath.Data.Entities.Group", "Group")
                        .WithMany("Members")
                        .HasForeignKey("GroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("iPath.Data.Entities.User", "User")
                        .WithMany("GroupMembership")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Group");

                    b.Navigation("User");
                });

            modelBuilder.Entity("iPath.Data.Entities.Node", b =>
                {
                    b.HasOne("iPath.Data.Entities.Group", "Group")
                        .WithMany("Nodes")
                        .HasForeignKey("GroupId");

                    b.HasOne("iPath.Data.Entities.User", "Owner")
                        .WithMany()
                        .HasForeignKey("OwnerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("iPath.Data.Entities.Node", "ParentNode")
                        .WithMany()
                        .HasForeignKey("ParentNodeId");

                    b.HasOne("iPath.Data.Entities.Node", "RootNode")
                        .WithMany("ChildNodes")
                        .HasForeignKey("RootNodeId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.OwnsOne("iPath.Data.Entities.NodeDescription", "Description", b1 =>
                        {
                            b1.Property<int>("NodeId")
                                .HasColumnType("INTEGER");

                            b1.Property<string>("AccessionNo")
                                .HasColumnType("TEXT");

                            b1.Property<string>("CaseType")
                                .HasColumnType("TEXT");

                            b1.Property<string>("Status")
                                .HasColumnType("TEXT");

                            b1.Property<string>("Subtitle")
                                .HasColumnType("TEXT");

                            b1.Property<string>("Text")
                                .IsRequired()
                                .HasColumnType("TEXT");

                            b1.Property<string>("Title")
                                .IsRequired()
                                .HasColumnType("TEXT");

                            b1.HasKey("NodeId");

                            b1.ToTable("Nodes");

                            b1.ToJson("Description");

                            b1.WithOwner()
                                .HasForeignKey("NodeId");
                        });

                    b.OwnsOne("iPath.Data.Entities.NodeFile", "File", b1 =>
                        {
                            b1.Property<int>("NodeId")
                                .HasColumnType("INTEGER");

                            b1.Property<string>("Filename")
                                .HasColumnType("TEXT");

                            b1.Property<int?>("ImageHeight")
                                .HasColumnType("INTEGER");

                            b1.Property<int?>("ImageWidth")
                                .HasColumnType("INTEGER");

                            b1.Property<DateTime?>("LastStorageExportDate")
                                .HasColumnType("TEXT");

                            b1.Property<string>("MimeType")
                                .HasColumnType("TEXT");

                            b1.Property<string>("ThumbData")
                                .HasColumnType("TEXT");

                            b1.HasKey("NodeId");

                            b1.ToTable("Nodes");

                            b1.ToJson("File");

                            b1.WithOwner()
                                .HasForeignKey("NodeId");
                        });

                    b.Navigation("Description")
                        .IsRequired();

                    b.Navigation("File");

                    b.Navigation("Group");

                    b.Navigation("Owner");

                    b.Navigation("ParentNode");

                    b.Navigation("RootNode");
                });

            modelBuilder.Entity("iPath.Data.Entities.NodeImport", b =>
                {
                    b.HasOne("iPath.Data.Entities.Node", null)
                        .WithOne("ImportedData")
                        .HasForeignKey("iPath.Data.Entities.NodeImport", "NodeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("iPath.Data.Entities.NodeLastVisit", b =>
                {
                    b.HasOne("iPath.Data.Entities.Node", "Node")
                        .WithMany("Visits")
                        .HasForeignKey("NodeId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("iPath.Data.Entities.User", "User")
                        .WithMany("NodeVisitis")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Node");

                    b.Navigation("User");
                });

            modelBuilder.Entity("iPath.Data.Entities.User", b =>
                {
                    b.OwnsOne("iPath.Data.Entities.UserProfile", "Profile", b1 =>
                        {
                            b1.Property<int>("UserId")
                                .HasColumnType("INTEGER");

                            b1.Property<string>("FamilyName")
                                .IsRequired()
                                .HasMaxLength(50)
                                .HasColumnType("TEXT")
                                .HasAnnotation("Relational:JsonPropertyName", "familyname");

                            b1.Property<string>("FirstName")
                                .IsRequired()
                                .HasMaxLength(50)
                                .HasColumnType("TEXT")
                                .HasAnnotation("Relational:JsonPropertyName", "firstname");

                            b1.Property<string>("Initials")
                                .IsRequired()
                                .HasMaxLength(3)
                                .HasColumnType("TEXT")
                                .HasAnnotation("Relational:JsonPropertyName", "initials");

                            b1.Property<string>("Specialisation")
                                .IsRequired()
                                .HasColumnType("TEXT")
                                .HasAnnotation("Relational:JsonPropertyName", "specialisation");

                            b1.Property<string>("Username")
                                .IsRequired()
                                .HasMaxLength(50)
                                .HasColumnType("TEXT");

                            b1.HasKey("UserId");

                            b1.ToTable("Users");

                            b1.ToJson("Profile");

                            b1.WithOwner()
                                .HasForeignKey("UserId");

                            b1.OwnsMany("iPath.Data.Entities.ContactDetails", "ContactDetails", b2 =>
                                {
                                    b2.Property<int>("UserProfileUserId")
                                        .HasColumnType("INTEGER");

                                    b2.Property<int>("__synthesizedOrdinal")
                                        .ValueGeneratedOnAddOrUpdate()
                                        .HasColumnType("INTEGER");

                                    b2.Property<string>("Email")
                                        .HasColumnType("TEXT");

                                    b2.Property<bool>("IsMainContact")
                                        .HasColumnType("INTEGER");

                                    b2.Property<string>("Organisation")
                                        .HasColumnType("TEXT");

                                    b2.Property<string>("PhoneNr")
                                        .HasColumnType("TEXT");

                                    b2.HasKey("UserProfileUserId", "__synthesizedOrdinal");

                                    b2.ToTable("Users");

                                    b2.WithOwner()
                                        .HasForeignKey("UserProfileUserId");

                                    b2.OwnsOne("iPath.Data.Entities.Address", "Address", b3 =>
                                        {
                                            b3.Property<int>("ContactDetailsUserProfileUserId")
                                                .HasColumnType("INTEGER");

                                            b3.Property<int>("ContactDetails__synthesizedOrdinal")
                                                .HasColumnType("INTEGER");

                                            b3.Property<string>("City")
                                                .HasColumnType("TEXT");

                                            b3.Property<string>("Country")
                                                .HasColumnType("TEXT");

                                            b3.Property<string>("PostalCode")
                                                .HasColumnType("TEXT");

                                            b3.Property<string>("Street")
                                                .HasColumnType("TEXT");

                                            b3.HasKey("ContactDetailsUserProfileUserId", "ContactDetails__synthesizedOrdinal");

                                            b3.ToTable("Users");

                                            b3.WithOwner()
                                                .HasForeignKey("ContactDetailsUserProfileUserId", "ContactDetails__synthesizedOrdinal");
                                        });

                                    b2.Navigation("Address");
                                });

                            b1.Navigation("ContactDetails");
                        });

                    b.Navigation("Profile");
                });

            modelBuilder.Entity("iPath.Data.Entities.UserNotification", b =>
                {
                    b.HasOne("iPath.Data.Entities.User", "User")
                        .WithMany("Notifications")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("iPath.Data.Entities.Community", b =>
                {
                    b.Navigation("Groups");

                    b.Navigation("Members");
                });

            modelBuilder.Entity("iPath.Data.Entities.Group", b =>
                {
                    b.Navigation("Communities");

                    b.Navigation("Members");

                    b.Navigation("Nodes");
                });

            modelBuilder.Entity("iPath.Data.Entities.Node", b =>
                {
                    b.Navigation("Annotations");

                    b.Navigation("ChildNodes");

                    b.Navigation("ImportedData");

                    b.Navigation("Uploads");

                    b.Navigation("Visits");
                });

            modelBuilder.Entity("iPath.Data.Entities.User", b =>
                {
                    b.Navigation("CommunityMembership");

                    b.Navigation("GroupMembership");

                    b.Navigation("NodeVisitis");

                    b.Navigation("Notifications");

                    b.Navigation("Uploads");
                });
#pragma warning restore 612, 618
        }
    }
}
