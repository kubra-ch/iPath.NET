@using System.ComponentModel
@using iPath.UI.Components.Nodes.ViewModels

@inject ISnackbar snackbar
@inject IDialogService srvDialog


@**** Gallery View **********************************************@
@if( vm.SelectedNode != null)
{ 
	<div class="gallery">
		@foreach (var c in vm.SelectedNode.ChildNodes.OrderBy(c => c.SortNr))
		{
			<div class="gallery-item" @onclick="@(() => OnChildClick(c))">

				<div class="gallery-contextmenu">
					<MudMenu FullWidth="true" ActivationEvent="@MouseEvent.MouseOver" AnchorOrigin="Origin.TopCenter" TransformOrigin="Origin.TopCenter" Disabled=@(!vm.EditEnabled)>
						<ActivatorContent>
								<MudIcon Icon="@Icons.Material.Filled.MoreVert" Size="Size.Small" />
						</ActivatorContent>
						<ChildContent>
							<MudMenuItem Label="Delete" OnClick=@(() => OnDeleteNode(c)) />
							<MudMenuItem Label="Edit" OnClick=@(() => OnEditNode(c)) />
						</ChildContent>
					</MudMenu>
				</div>

				<MudTooltip>
					<TooltipContent>
						<b>Owner: </b> @c.Owner.Username - @c.CreatedOn.ToString()<br />
						<b>Filename: </b>@c.GalleryCaption
					</TooltipContent>
					<ChildContent>
						<GalleryImage Model="@c" />
					</ChildContent>
				</MudTooltip>
			</div>
		}
	</div>
}

@code {
	[Parameter]
	public NodeDetailViewModel vm { get; set; }


	void OnChildClick(NodeModel child)
	{
		vm.SelectedNode = child;
	}

	async Task OnDeleteNode(NodeModel node)
	{
		var result = await srvDialog.ShowMessageBox("Delete", "Are you sure that you want to delete this node?", "yes", "no");
		if( result != null )
		{
			await vm.DeleteNodeAsync(node);
		}
	}

	async Task OnEditNode(NodeModel node)
	{
		await srvDialog.ShowMessageBox("Image", $"Image Id = {node.Id}");
	}
}
