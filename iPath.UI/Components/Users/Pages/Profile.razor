@page "/account/myprofile"
@page "/account/profile/{Id:int}"
@using iPath.UI.Components.Users.ViewModels

@inject IDataCache srvCache;
@inject UserProfileViewModel vm
@inject ISnackbar snackbar

@if( vm.Model != null )
{
    <AuthorizeView>
        <Authorized>
            <MudText Typo="Typo.h5" Class="ipath_caption">User profile of @vm.Model?.Username</MudText>

            <MudTabs Elevation="2" Rounded="true" ApplyEffectsToContainer="true" PanelClass="pa-6">
                <MudTabPanel Text="Personal Data">
                    <div style="max-width: 900px; margin: 2em;">
                        <UserProfileForm ViewModel="@vm" />
                    </div>
                    <MudStack Row="true">
                        <MudButton Color="Color.Primary" Variant="Variant.Filled" OnClick="Submit">Save</MudButton>
                        <MudButton Color="Color.Secondary" OnClick="Cancel">Cancel</MudButton>
                    </MudStack>
                </MudTabPanel>

                <MudTabPanel Text="Notifications">
                    <UserNotificationForm UserId="@vm.User.Id" />
                </MudTabPanel>
            </MudTabs>
        </Authorized>
    </AuthorizeView>
}

@code {
    [Parameter]
    public int? Id { get; set; }

    [CascadingParameter]
    CascadingAppState appState { get; set; }


    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender && appState.SessionUser?.UserId > 0)
        {
            var resp = await vm.LoadUserAsync(appState.SessionUser.UserId);
            if (!resp.Success) snackbar.Add(resp.Message, Severity.Error);
            StateHasChanged();
        }
    }

    async Task Submit()
    {
        var resp = await vm.SaveProfileAsync();
        if (resp.Success)
        {
            snackbar.Add("Profile saved", Severity.Success);
        }
        else
        {
            snackbar.Add(resp.Message, Severity.Error);
        }
    }

    async Task Cancel()
    {
        var resp = await vm.LoadUserAsync(vm.User.Id);
        snackbar.Add("Profile reloaded", Severity.Info);
    }
}
